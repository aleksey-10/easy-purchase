{"version":3,"sources":["assets/images/auchan.png","assets/images/velmart.png","assets/images/silpo.png","assets/images/novus.png","components/common/Header/Header.jsx","components/Content/Todo/Form/AdditionalActions/AdditionalActions.jsx","components/Content/Todo/Form/Form.jsx","components/Content/Todo/TodoList/TodoItem/TodoElement.jsx","components/Content/Todo/TodoList/TodoItem/TodoItem.jsx","api/api.js","redux/marketsReducer.js","components/Content/Todo/TodoList/TodoItem/TodoItemContainer.jsx","components/Content/Todo/TodoList/TodoList.jsx","components/common/Preloader.jsx","components/Content/Todo/TodoList/TodoListContainer.jsx","components/Content/Todo/Todo.jsx","redux/inputReducer.js","components/Content/Todo/TodoContainer.jsx","components/Content/Content.jsx","components/Content/ContentContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Header","props","className","bgColorClass","to","market","logo","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","type","value","onClick","calcSum","marketName","setCompletedAll","removeTodo","onSubmit","event","preventDefault","addTodo","input","form","title","onSubmitTodoAC","placeholder","onChange","onChangeAC","target","required","min","AdditionalActions","saveToLSAC","compose","connect","state","ownProps","initialValues","name","val","reduxForm","enableReinitialize","handleSubmit","Field","onBlur","submit","component","autoFocus","TodoItem","useState","todoElements","setTodoElements","createElementInner","property","TodoElement","todo","values","editTodo","trim","editCurrentTodo","completed","checked","setCompleted","instance","axios","baseURL","todoAPI","getTodos","get","then","response","data","postTodo","post","deleteTodo","delete","toggleCompleted","put","dataName","Object","keys","JSON","stringify","SAVE_TO_LS","initState","auchan","velmart","novus","silpo","fair","fetching","marketsReducer","action","markets","localStorage","setItem","filter","map","index","alert","reduce","sum","item","clearTodoListAC","removeTodoAC","dispatch","setTodoCompletedAC","editTodoAC","TodoList","TodoItemContainer","key","Preloader","style","width","height","TodoListContainer","this","length","React","Component","Todo","Form","inputReducer","addTodoAC","allCompleted","toggleCompleteAll","Content","TodoContainer","ContentContainer","createImg","path","src","alt","setTodos","match","params","auchanLogo","velmartLogo","silpoLogo","novusLogo","payload","withRouter","App","Boolean","window","location","hostname","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca6607f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/auchan.5a911c8b.png\";","module.exports = __webpack_public_path__ + \"static/media/velmart.bcee6b19.png\";","module.exports = __webpack_public_path__ + \"static/media/silpo.6402b432.png\";","module.exports = __webpack_public_path__ + \"static/media/novus.7931c6a4.png\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nlet Header = props => {\n    return (\n        <nav className={`navbar navbar-expand ${props.bgColorClass}`}>\n            <NavLink className=\"navbar-brand\" to={`/${props.market}`}>{props.logo}</NavLink>\n            \n                <div className=\"navbar-nav ml-auto\">\n                    <div className=\"nav-item dropdown\">\n                        <NavLink className=\"nav-link active dropdown-toggle\" to=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Show markets   </NavLink>\n                        <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\">\n                            <NavLink className=\"dropdown-item\" to=\"/auchan\">Auchan</NavLink>\n                            <NavLink className=\"dropdown-item\" to=\"/velmart\">Velmart</NavLink>\n                            <NavLink className=\"dropdown-item\" to=\"/silpo\">Silpo</NavLink>\n                            <NavLink className=\"dropdown-item\" to=\"/novus\">Novus</NavLink>\n                            <NavLink className=\"dropdown-item\" to=\"/fair\">Market</NavLink>\n                        </div>\n                    </div>\n                </div>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nexport default (props) => (\n    <div className=\"dropdown-menu\">\n        <input type=\"submit\" className=\"dropdown-item\" value=\"Submit\" />\n       \n        <div role=\"separator\" className=\"dropdown-divider\"></div>\n       \n        <button type=\"button\" className=\"dropdown-item\"\n            onClick={() => props.calcSum(props.marketName)}>Total sum</button>\n        <button type=\"button\" className=\"dropdown-item\"\n            onClick={() => props.setCompletedAll(props.marketName, props.market)}>Completed all</button>\n        \n        <div role=\"separator\" className=\"dropdown-divider\"></div>\n        \n        <button type=\"button\" className=\"dropdown-item\"\n            onClick={() => {\n                props.removeTodo(props.marketName);\n            }}>Clear todos</button>\n    </div>\n)","import React from 'react';\nimport AdditionalActions from './AdditionalActions/AdditionalActions';\n\nexport default ({props}) => {\n    return (\n        <form className=\"form row justify-content-around\"\n            onSubmit={event => {\n                event.preventDefault();\n                props.addTodo(props.marketName, props.input.form.title, props.input.form.value);\n                props.onSubmitTodoAC();\n        }}>\n            <input\n                type=\"text\"\n                className=\"form-control col\"\n                placeholder=\"Product\"\n                value={props.input.form.title}\n                onChange={event => props.onChangeAC('title', event.target.value)}\n                required\n            />\n\n            <input\n                type=\"number\"\n                className=\"form-control col-2\"\n                placeholder=\"Value\"\n                min=\"0\"\n                value={props.input.form.value || ''}\n                onChange={event => props.onChangeAC('value', event.target.value)}\n            />\n\n            <button\n                type=\"button\"\n                className=\"form-control col-2 col-md-1 btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n            >\n                <span className=\"sr-only\">Toggle Dropdown</span>\n            </button>\n\n            <AdditionalActions\n                removeTodo={props.removeTodo}\n                saveToLSAC={props.saveToLSAC}\n                marketName={props.marketName}\n                market={props.market}\n                calcSum={props.calcSum}\n                setCompletedAll={props.setCompletedAll}\n            />\n        </form>\n\n    )\n}","import React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\n\nconst editElement = props => <form onSubmit={props.handleSubmit}>\n    <Field\n        onBlur={props.submit}\n        component={\"input\"}\n        name={props.name}\n        type={props.type}\n        className=\"w-100 h-100\"\n        autoFocus\n    />\n</form>\n\nconst mapStateToProps = (state, ownProps) => ({\n    initialValues: {[ownProps.name]: ownProps.val }\n})\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({ form: 'itemElement', enableReinitialize: true })\n)(editElement)\n","import React, { useState } from 'react';\nimport TodoElementInput from './TodoElement';\n\nlet TodoItem = props => {\n    let [todoElements, setTodoElements] = useState({});\n\n    const editCurrentTodo = (values, property) => {\n        values[property] &&\n            props.editTodo(props.marketName, props.todo.id, { [property]: values[property].trim() })\n\n        setTodoElements({ [property]: false })\n    }\n\n    const createElementInner = (property, type) => !todoElements[property] ? props.todo[property] :\n        <TodoElementInput\n            type={type}\n            name={property}\n            val={props.todo[property]}\n            onSubmit={values => editCurrentTodo(values, property)}\n        />\n\n    return <li className={`list-group-item bg-light ${props.todo.completed && \"todo-completed\"}`}>\n        <div className=\"row justify-content-around align-items-center\">\n            <input type=\"checkbox\"\n                className=\"item-element check col-1\"\n                checked={props.todo.completed}\n                onChange={() => props.setCompleted(props.marketName, props.todo)}\n            />\n\n            <div className=\"item-element text col\" onClick={() => {\n                !props.todo.completed && setTodoElements({ title: true })\n            }}  >\n                {createElementInner(\"title\", \"text\")}\n            </div>\n\n            <div className=\"item-element value col-3\" onClick={() => {\n                !props.todo.completed && setTodoElements({ value: true })\n            }}>\n                {createElementInner(\"value\", \"number\")}\n            </div>\n\n            <div className=\"item-element col-2 col-md-1 row justify-content-center\">\n                <i className=\"fas fa-times remove-item\" onClick={() => {\n                    props.removeTodo(props.marketName, props.todo.id);\n                }}></i>\n            </div>\n        </div>\n    </li>\n}\n\nexport default TodoItem;","import * as axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://easy-purchase-e225b.firebaseio.com/\"\n});\n\nconst todoAPI = {\n    getTodos() {\n        return instance.get('/markets.json').then(response => response.data)\n    },\n\n    postTodo(marketName, title, value) {\n        return instance.post(`markets/${marketName}.json`, { title, value, completed: false })\n            .then(response => response.data);\n    },\n\n    deleteTodo(marketName, id) {\n        return instance.delete(`markets/${marketName}/${id}.json`)\n    },\n\n    toggleCompleted(marketName, id, completed) {\n        return instance.put(`markets/${marketName}/${id}/completed.json`, completed  )\n    },\n\n    editTodo(marketName, id, data) {\n        const dataName = Object.keys(data)[0];\n        \n        return instance.put(`markets/${marketName}/${id}/${dataName}.json`, JSON.stringify(data[dataName]) )\n    }\n};\n\nexport default todoAPI;\n\n","import todoAPI from \"../api/api\";\n\nconst ADD_TODO = 'ADD_TODO';\nconst SAVE_TO_LS = 'SAVE_TO_LOCAL_STORAGE';\nconst SET_TODOS = 'SET_TODOS';\nconst CLEAR_TODO_LIST = 'CLEAR_TODO_LIST';\nconst REMOVE_TODO = 'REMOVE_TODO';\nconst SET_TODO_ID = 'SET_TODO_ID';\nconst SET_TODO_COMPLETED = 'SET_TODO_COMPLETED';\nconst CALC_SUM = 'CALC_SUM';\nconst TOGGLE_FETCHING = 'TOGGLE_FETCHING';\nconst COMPLETED_ALL = 'COMPLETED_ALL';\nconst EDIT_TODO_AC = 'EDIT_TODO_AC';\n\nconst initState = {\n    auchan: [],\n    velmart: [],\n    novus: [],\n    silpo: [],\n    fair: [],\n    fetching: true\n}\n\nconst marketsReducer = (state = initState, action) => {\n    switch (action.type) {\n        case SET_TODOS:\n            return {\n                ...state,\n                ...action.markets\n            }\n\n        case ADD_TODO:\n            return {\n                ...state,\n                [action.marketName]: [\n                    ...state[action.marketName],\n                    action.todo\n                ]\n            }\n\n        case SAVE_TO_LS:\n            localStorage.setItem('todos', JSON.stringify(state));\n\n            return state;\n\n        case CLEAR_TODO_LIST:\n            return {\n                ...state,\n                [action.marketName]: []\n            }\n\n        case REMOVE_TODO:\n            return {\n                ...state,\n                [action.marketName]: state[action.marketName]\n                    .filter(todo => todo.id !== action.id)\n            }\n\n        case SET_TODO_ID:\n            return {\n                ...state,\n                [action.marketName]: state[action.marketName].map((todo, index) => {\n                    todo.id = index;\n                    return todo;\n                })\n            }\n\n        case SET_TODO_COMPLETED:\n            return {\n                ...state,\n                [action.marketName]: state[action.marketName].map(todo => {\n                    if (todo.id === action.id) {\n                        todo.completed = !todo.completed;\n                    }\n                    return todo;\n                })\n            }\n\n        case CALC_SUM:\n            alert(state[action.marketName].reduce((sum, item) => sum + +item.value, 0));\n\n            return state;\n\n        case TOGGLE_FETCHING:\n            return { ...state, fetching: !state.fetching }\n\n        case COMPLETED_ALL:\n            return {\n                ...state,\n                [action.marketName]: state[action.marketName].map(todo => {\n                    todo.completed = action.completed;\n                    return todo;\n                })\n            }\n\n        case EDIT_TODO_AC:\n            return {\n                ...state,\n                [action.marketName]: state[action.marketName].map(todo => {\n                    if (action.id === todo.id) todo = {...todo, ...action.data}\n                    return todo\n                })\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default marketsReducer;\n\nexport let addTodoAC = (marketName, todo) => ({ type: ADD_TODO, marketName, todo })\nexport let saveToLSAC = () => ({ type: SAVE_TO_LS })\nexport let setTodoAC = (markets) => ({ type: SET_TODOS, markets })\nexport let clearTodoListAC = marketName => ({ type: CLEAR_TODO_LIST, marketName })\nexport let removeTodoAC = (marketName, id) => ({ type: REMOVE_TODO, marketName, id })\nexport let setTodoCompletedAC = (marketName, id) =>\n    ({ type: SET_TODO_COMPLETED, marketName, id })\nexport let calcSum = marketName => ({ type: CALC_SUM, marketName })\nexport let toggleFetching = () => ({ type: TOGGLE_FETCHING })\nexport let toggleCompleteAll = (marketName, completed) => ({ type: COMPLETED_ALL, marketName, completed });\nlet editTodoAC = (marketName, id, data) => ({ type: EDIT_TODO_AC, marketName, id, data })\n\nexport const setTodos = () => dispatch => {\n    todoAPI.getTodos().then(data => {\n        if (data !== null) {\n\n            const payload = {};\n\n            for (let marketName in data) {\n                payload[marketName] = Object.keys(data[marketName]).map(key => ({\n                    ...data[marketName][key],\n                    id: key\n                }))\n            }\n\n            dispatch(setTodoAC(payload));\n        }\n\n        dispatch(toggleFetching());\n    });\n}\n\nexport const addTodo = (marketName, title, value) => dispatch => {\n    todoAPI.postTodo(marketName, title, value)\n        .then(data => {\n            dispatch(addTodoAC(marketName, { title, value, id: data.name, completed: false }))\n        })\n}\n\nexport const removeTodo = (marketName, id = '') => dispatch => {\n    todoAPI.deleteTodo(marketName, id);\n\n    !id ? dispatch(clearTodoListAC(marketName)) : dispatch(removeTodoAC(marketName, id));\n}\n\nexport const setCompleted = (marketName, todo) => dispatch => {\n    todoAPI.toggleCompleted(marketName, todo.id, !todo.completed)\n\n    dispatch(setTodoCompletedAC(marketName, todo.id))\n}\n\nexport const setCompletedAll = (marketName, market) => dispatch => {\n\n    let allCompleted = market.filter(todo => !todo.completed).length;\n\n    dispatch(toggleCompleteAll(marketName, allCompleted));\n\n    market.map(todo => (\n        todoAPI.toggleCompleted(marketName, todo.id, allCompleted)\n    ))\n}\n\nexport const editTodo = (marketName, id, data) => dispatch => {\n    todoAPI.editTodo(marketName, id, data)\n\n    dispatch(editTodoAC(marketName, id, data))\n}","import { connect } from \"react-redux\";\nimport TodoItem from './TodoItem';\nimport { removeTodo, setCompleted, editTodo } from \"../../../../../redux/marketsReducer\";\n\n\nlet mapStateToProps = (state, ownProps) => ({\n    markets: state.markets,\n    market: state.markets[ownProps.marketName],\n    marketName: ownProps.marketName,\n    todo: ownProps.todo\n})\n\nexport default connect(mapStateToProps,\n    { removeTodo, setCompleted, editTodo })(TodoItem);","import React from 'react';\nimport TodoItemContainer from './TodoItem/TodoItemContainer';\n\nlet TodoList = props => {\n    return <ul className=\"list-group\">\n        {\n            props.market.map(todo => <TodoItemContainer todo={todo} key={todo.id} marketName={props.marketName} />)\n        }\n    </ul>\n}\n\nexport default TodoList;","import React from 'react';\n\nlet Preloader = () => {\n    return <div className=\"d-flex justify-content-center mt-4\">\n        <div className=\"spinner-border text-secondary\" style={{width: '3rem', height: '3rem'}} role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\n\nexport default Preloader;","import React from 'react';\nimport { connect } from \"react-redux\";\nimport TodoList from './TodoList';\nimport Preloader from './../../../common/Preloader';\n\nclass TodoListContainer extends React.Component {\n    render() {\n        return (this.props.markets.fetching) ? <Preloader /> : <>{\n            !this.props.market.length ? <h1 className=\"display-4\">No todos</h1>\n                : <TodoList market={this.props.market} marketName={this.props.marketName} />\n        }</>\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    markets: state.markets,\n    market: state.markets[ownProps.marketName],\n    marketName: ownProps.marketName\n})\n\nexport default connect(mapStateToProps)(TodoListContainer);","import React from 'react';\nimport Form from './Form/Form';\nimport TodoListContainer from './TodoList/TodoListContainer';\n\nlet Todo = props => {\n    return <div className=\"market-content container\">\n        <Form props={props} />\n\n        <TodoListContainer market={props.market} marketName={props.marketName} />\n    </div>\n}\n\nexport default Todo; ","const ON_CHANGE_FORM = 'ON-CHANGE-FORM';\nconst ON_SUBMIT_TODO = 'ON-SUBMIT-TODO';\n\nconst initState = {\n    form: {\n        title: '',\n        value: 0,\n    }\n\n}\n\nconst inputReducer = (state = initState, action) => {\n\n    switch (action.type) {\n        case ON_CHANGE_FORM:\n            return {\n                ...state,\n                form: { ...state.form, [action.dataName]: action.data }\n            }\n\n        case ON_SUBMIT_TODO:\n            return {\n                ...state,\n                form: { title: '', value: 0 }\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default inputReducer;\n\nexport let onChangeAC = (dataName, data) => ({ type: ON_CHANGE_FORM, dataName, data })\nexport let onSubmitTodoAC = () => ({ type: ON_SUBMIT_TODO })","\nimport { connect } from \"react-redux\";\nimport Todo from './Todo';\nimport { addTodo, removeTodo, calcSum, setCompletedAll } from \"../../../redux/marketsReducer\";\nimport { onChangeAC, onSubmitTodoAC } from \"../../../redux/inputReducer\";\n\n\nlet mapStateToProps = (state, ownProps) => ({\n    marketName: ownProps.market,\n    market: state.markets[ownProps.market],\n    markets: state.markets,\n    input: state.input\n});\n\nexport default connect(mapStateToProps, \n    {  onChangeAC, removeTodo, onSubmitTodoAC, calcSum, addTodo, setCompletedAll})(Todo);","import React from 'react';\nimport Header from '../common/Header/Header';\nimport TodoContainer from './Todo/TodoContainer';\n\nlet Content = props => {\n    return (\n        <div className=\"home\">\n            <Header\n                market={props.market}\n                bgColorClass={props.bgColorClass}\n                logo={props.logo}\n            />\n            <TodoContainer market={props.market} />\n        </div>\n    )\n} \n\nexport default Content;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Content from './Content';\nimport { setTodos } from './../../redux/marketsReducer';\n\nimport auchanLogo from './../../assets/images/auchan.png';\nimport velmartLogo from './../../assets/images/velmart.png';\nimport silpoLogo from './../../assets/images/silpo.png';\nimport novusLogo from './../../assets/images/novus.png';\nimport { compose } from 'redux';\n\n\nclass ContentContainer extends React.Component {\n    componentDidMount() {\n        this.props.setTodos();\n    }\n\n    createImg = (path, title) => (\n        <img className=\"logo\" src={path} alt={title} />\n    )\n\n    render() {\n        switch (this.props.match.params.market) {\n            case 'auchan':\n                return (\n                    <Content\n                        market={this.props.match.params.market}\n                        bgColorClass=\"navbar-dark bg-danger\"\n                        logo={this.createImg(auchanLogo, 'Auchan')}\n                    />\n                );\n            case 'velmart':\n                return (\n                    <Content\n                        market={this.props.match.params.market}\n                        bgColorClass=\"navbar-light bg-light\"\n                        logo={this.createImg(velmartLogo, 'Velmart')}\n                    />\n                );\n            case 'silpo':\n                return (\n                    <Content\n                        market={this.props.match.params.market}\n                        bgColorClass=\"navbar-light bg-warning\"\n                        logo={this.createImg(silpoLogo, 'Silpo')}\n                    />\n                );\n            case 'fair':\n                return (\n                    <Content\n                        market={this.props.match.params.market}\n                        bgColorClass=\"navbar-dark bg-secondary\"\n                        logo=\"MARKET\"\n                    />\n                )\n            default:\n                return (\n                    <Content\n                        market={'novus'}\n                        bgColorClass=\"navbar-dark bg-success\"\n                        logo={this.createImg(novusLogo, 'Novus')}\n                    />\n                );\n        }\n\n    }\n}\n\nlet mapStateToProps = state => ({\n    markets: state.markets\n})\n\nexport default compose(\n    connect(mapStateToProps, {setTodos}),\n    withRouter\n) (ContentContainer);\n","import React from 'react';\nimport './style/style.scss';\nimport { Route, HashRouter } from 'react-router-dom';\nimport ContentContainer from './components/Content/ContentContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Route path=\"/:market?\" component={ContentContainer} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport marketsReducer from \"./marketsReducer\";\nimport inputReducer from './inputReducer';\nimport thunkMiddleware from 'redux-thunk';\nimport {reducer as formReducer} from 'redux-form';\n\nconst reducers = combineReducers({\n    markets: marketsReducer,\n    input: inputReducer,\n    form: formReducer\n})\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}